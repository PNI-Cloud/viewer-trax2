{"version":3,"sources":["DataBuffer.ts","App.tsx","index.tsx"],"names":["DataBuffer","maxLength","buffer","partial","this","Uint8Array","data","length","packet","validate","undefined","extended","push","shift","App","useState","traxState","setTraxState","modInfo","setModInfo","traxMessage","setTraxMessage","dataRef","useRef","useReducer","x","forceUpdate","nstRef","traxWithCrc16","index","crc","i","from","toHexString","byteArray","map","toString","padStart","join","useEffect","wsUrlParam","URLSearchParams","window","location","search","get","wsUrl","nstClient","NstrumentaClient","apiKey","projectId","current","console","log","addListener","subscribe","message","type","add","frameId","TextDecoder","decode","slice","JSON","stringify","init","className","Grid","container","spacing","item","xs","Button","variant","onClick","kGetModInfoCommand","sendBuffer","TextField","id","label","onChange","e","target","value","numberArray","replace","split","str","Number","tryParse","bytes","style","width","whiteSpace","reverse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4fa6022.chunk.js","sourcesContent":["export default class DataBuffer {\n    maxLength: number;\n    public buffer: Array<Uint8Array>;\n    partial: Uint8Array;\n    constructor(maxLength: number) {\n        this.maxLength = maxLength;\n        this.buffer = [];\n        this.partial = new Uint8Array();\n    }\n\n    validate(data: Uint8Array) {\n        if (data[1] === data.length) {\n            return true;\n        }\n    }\n\n    add(data: Uint8Array) {\n        let packet = this.validate(data) ? data : undefined;\n        if (!packet) {\n            const extended = new Uint8Array([...this.partial, ...data]);\n            if (this.validate(extended)) {\n                packet = extended;\n            }\n        }\n        if (!packet) { this.partial = data; return }\n\n        this.buffer.push(packet);\n        while (this.buffer.length > this.maxLength) {\n            this.buffer.shift();\n        }\n    }\n}","import { Button, Grid, TextField } from \"@mui/material\";\nimport { NstrumentaClient } from \"nstrumenta\";\nimport React, {\n  ChangeEventHandler,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from \"react\";\nimport \"./App.css\";\nimport DataBuffer from \"./DataBuffer\";\n// CRC implementation from TRAX2 User Manual\n// function(CRC(void * data, UInt32 len) {\n//   UInt8 * dataPtr = (UInt8 *)data;\n//   UInt32 index = 0;\n//   // Update the CRC for transmitted and received data using // the CCITT 16bit algorithm (X^16 + X^12 + X^5 + 1). UInt16 crc = 0;\n//   while(len--)\n//   {\n//   crc = (unsigned char)(crc >> 8) | (crc << 8);\n//   crc ^= dataPtr[index++];\n//   crc ^= (unsigned char)(crc & 0xff) >> 4;\n//   crc ^= (crc << 8) << 4;`\n//   crc ^= ((crc & 0xff) << 4) << 1;\n//   }\n//   return crc;\n//   }\n\nfunction App() {\n  const [traxState, setTraxState] = useState<string>();\n  const [modInfo, setModInfo] = useState<string>();\n  const [traxMessage, setTraxMessage] = useState<Uint8Array>();\n\n  const dataRef = useRef<DataBuffer>();\n  // store data in dataRef and forceUpdate for re-render\n  // eslint-disable-next-line\n  const [_, forceUpdate] = useReducer((x: number) => x + 1, 0);\n  const nstRef = useRef<NstrumentaClient>();\n\n  const traxWithCrc16 = (data: number[]): Uint8Array => {\n    let index = 0;\n    let crc = 0;\n    for (let i = data.length - 1; i >= 0; i--) {\n      crc = (crc >> 8) | (crc << 8);\n      crc ^= data[index++];\n      crc ^= (crc & 0xff) >> 4;\n      crc ^= (crc << 8) << 4;\n      crc ^= ((crc & 0xff) << 4) << 1;\n    }\n    return Uint8Array.from([\n      ...data,\n      (crc & 0xff00) >> 8,\n      crc & 0x00ff,\n    ] as number[]);\n  };\n\n  function toHexString(byteArray: Uint8Array) {\n    return [...byteArray].map((x) => x.toString(16).padStart(2, \"0\")).join(\" \");\n  }\n\n  const getModInfo = () => {\n    if (!nstRef.current) return;\n    // kGetModInfo\n    const kGetModInfoCommand = traxWithCrc16([0x00, 0x05, 0x01]);\n    console.log(\"sending kGetModInfo\", kGetModInfoCommand);\n    nstRef.current.sendBuffer(\"trax-in\", kGetModInfoCommand);\n  };\n\n  const sendBytes = (bytes: Uint8Array) => {\n    if (!nstRef.current) return;\n    nstRef.current.sendBuffer(\"trax-in\", bytes);\n  };\n\n  const updateMessage: ChangeEventHandler<\n    HTMLInputElement | HTMLTextAreaElement\n  > = (e) => {\n    console.log(e.target.value);\n    try {\n      const numberArray = e.target.value\n        .replace(\"[\", \"\")\n        .replace(\"]\", \"\")\n        .split(\",\")\n        .map((str) => Number(str));\n\n      const tryParse = traxWithCrc16(numberArray);\n      console.log(tryParse);\n      setTraxMessage(tryParse);\n    } catch {}\n  };\n\n  useEffect(() => {\n    //get wsUrl from params if present\n    const wsUrlParam = new URLSearchParams(window.location.search).get(\"wsUrl\");\n\n    const wsUrl = wsUrlParam ? wsUrlParam : \"ws://localhost:8088\";\n\n    const nstClient = new NstrumentaClient({\n      apiKey: \"\",\n      projectId: \"\",\n      wsUrl,\n    });\n\n    nstRef.current = nstClient;\n\n    dataRef.current = new DataBuffer(100);\n\n    console.log(\"connecting to \", wsUrl);\n\n    nstClient.addListener(\"open\", () => {\n      console.log(\"nst client open\");\n      nstClient.subscribe(\"serialport-events\", (message) => {\n        console.log(\"serialport-events\", message);\n        switch (message.type) {\n          case \"open\":\n            setTraxState(\"open\");\n        }\n      });\n      nstClient.subscribe(\"trax2\", (message) => {\n        if (traxState !== \"open\") setTraxState(\"open\");\n\n        dataRef.current?.add(new Uint8Array(message.data));\n        forceUpdate();\n\n        console.log(\"trax2\", message);\n        const frameId = message.data[2];\n        switch (frameId) {\n          case 0x02:\n            const modInfo = new TextDecoder().decode(\n              new Uint8Array(message.data.slice(3, -2))\n            );\n            console.log(JSON.stringify(message), modInfo);\n            setModInfo(modInfo);\n            break;\n          case 0x05:\n            console.log(\"data\");\n            break;\n\n          default:\n            console.log(`unhandled frame ID: ${frameId}`, message);\n            break;\n        }\n      });\n    });\n    nstClient.init();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Button variant=\"contained\" onClick={getModInfo}>\n            kGetModInfo\n          </Button>\n          {modInfo}\n        </Grid>\n        <Grid item xs={4}>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"[0x00,0x05,0x01]\"\n            variant=\"outlined\"\n            onChange={updateMessage}\n          />\n        </Grid>\n        <Grid item xs={3}>\n          {traxMessage ? toHexString(traxMessage) : null}\n        </Grid>\n        <Grid item xs={1}>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              if (traxMessage) {\n                sendBytes(traxMessage);\n              }\n            }}\n          >\n            Send\n          </Button>\n        </Grid>\n      </Grid>\n      <div style={{ width: \"100%\", whiteSpace: \"pre-line\" }}>\n        {dataRef.current?.buffer\n          .reverse()\n          .map((message) => {\n            return toHexString(message);\n          })\n          .join(\"\\n\")}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}